{
  "componentList": [
    {
      "name": "LyOverlayBackdrop",
      "selector": "ly-overlay-backdrop",
      "children": "onclick(): void"
    }
  ],
  "directiveList": [
    {
      "name": "NgTranscludeDirective",
      "selector": "[ngTransclude]",
      "children": "@Input() ngTransclude: TemplateRef"
    },
    {
      "name": "LyPaper",
      "selector": "ly-paper, [ly-paper]",
      "inputs": [
        "bg",
        "flat",
        "color",
        "raised",
        "outlined",
        "elevation",
        "shadowColor",
        "disableRipple"
      ],
      "children": ""
    },
    {
      "name": "LyWithClass",
      "selector": "[withClass]",
      "children": "@Input() withClass: any"
    }
  ],
  "interfaceList": [
    {
      "name": "ColorScheme",
      "children": "interface ColorScheme {\n  background: any,\n  bar: string,\n  /** Components variables */\n  colorShadow: string,\n  divider: string,\n  input: any,\n  text: any\n}"
    },
    {
      "name": "PaletteVariables",
      "children": "interface PaletteVariables {\n  contrast: string,\n  default: string\n}"
    },
    {
      "name": "CanBg",
      "children": "interface CanBg {\n  bg: string\n}"
    },
    {
      "name": "CanStyleUpdater",
      "children": "interface CanStyleUpdater {\n  _theme: LyTheme2,\n  setAutoContrast: any,\n  updateStyle: any\n}"
    },
    {
      "name": "RequireParamsStyleUpdater",
      "children": "interface RequireParamsStyleUpdater {\n  _theme: LyTheme2\n}"
    },
    {
      "name": "CanColor",
      "children": "interface CanColor {\n  color: string\n}"
    },
    {
      "name": "CanDisableRipple",
      "children": "interface CanDisableRipple {\n  _removeRippleEvents: any,\n  _rippleConfig: RippleConfig,\n  _rippleContainer: ElementRef,\n  _triggerElement: ElementRef,\n  disableRipple: boolean\n}"
    },
    {
      "name": "RequireParams",
      "children": "interface RequireParams {\n  _ngZone: NgZone,\n  _theme: LyTheme2\n}"
    },
    {
      "name": "CanDisable",
      "children": "interface CanDisable {\n  disabled: string\n}"
    },
    {
      "name": "CanElevation",
      "children": "interface CanElevation {\n  elevation: number\n}"
    },
    {
      "name": "CanOutlined",
      "children": "interface CanOutlined {\n  outlined: boolean\n}"
    },
    {
      "name": "CanRaised",
      "children": "interface CanRaised {\n  raised: boolean\n}"
    },
    {
      "name": "CanShadowColor",
      "children": "interface CanShadowColor {\n  shadowColor: string\n}"
    },
    {
      "name": "OverlayFromTemplateRef",
      "children": "interface OverlayFromTemplateRef {\n  containerElement: HTMLDivElement,\n  /** Detach & remove */\n  destroy: any,\n  /** Detaches a view from dirty checking again of ApplicationRef. */\n  detach: any,\n  /** Remove element of DOM */\n  remove: any\n}"
    },
    {
      "name": "FocusState",
      "children": "interface FocusState {\n  by: 'keyboard' | 'mouse',\n  event: FocusEvent\n}"
    },
    {
      "name": "FocusStateInfo",
      "children": "interface FocusStateInfo {\n  subject: Subject,\n  unlisten: any\n}"
    },
    {
      "name": "HammerInput",
      "children": "interface HammerInput {\n  center: any,\n  deltaX: number,\n  deltaY: number,\n  preventDefault: any\n}"
    },
    {
      "name": "HammerInstance",
      "children": "interface HammerInstance {\n  off,\n  on\n}"
    },
    {
      "name": "HammerManager",
      "children": "interface HammerManager {\n  add,\n  emit,\n  off,\n  on,\n  set\n}"
    },
    {
      "name": "HammerOptions",
      "children": "interface HammerOptions {\n  cssProps: any,\n  domEvents: boolean,\n  enable: boolean | any,\n  inputClass: HammerInput,\n  inputTarget: EventTarget,\n  preset: any,\n  recognizers: any,\n  touchAction: string\n}"
    },
    {
      "name": "HammerStatic",
      "children": "interface HammerStatic {\n  constructor,\n  Pan: Recognizer,\n  Press: Recognizer,\n  Swipe: Recognizer\n}"
    },
    {
      "name": "Recognizer",
      "children": "interface Recognizer {\n  constructor,\n  recognizeWith\n}"
    },
    {
      "name": "RecognizerStatic",
      "children": "interface RecognizerStatic {\n  constructor\n}"
    },
    {
      "name": "RippleConfig",
      "children": "interface RippleConfig {\n  centered: boolean,\n  disabled: boolean,\n  percentageToIncrease: number,\n  radius: 'containerSize' | number,\n  sensitive: boolean\n}"
    },
    {
      "name": "DataStyle",
      "children": "interface DataStyle {\n  id: string,\n  style: Style,\n  styleElement: HTMLStyleElement\n}"
    },
    {
      "name": "StyleData",
      "children": "interface StyleData {\n  fn: any,\n  /** Class Id */\n  id: string,\n  key: string,\n  styleContainer: any,\n  styleContent: any\n}"
    },
    {
      "name": "DefaultVal",
      "children": "interface DefaultVal {\n  default: string\n}"
    },
    {
      "name": "PaletteColor",
      "children": "interface PaletteColor {\n  contrast: string,\n  /** shadow color */\n  shadow: string\n}"
    },
    {
      "name": "ThemeConfig",
      "children": "interface ThemeConfig {\n  accent: any,\n  animations: any,\n  background: any,\n  badge: any,\n  button: ButtonVariables,\n  checkbox: CheckboxVariables,\n  \n  colorShadow: string,\n  direction: Dir,\n  disabled: string,\n  /** color for divider */\n  divider: string,\n  drawer: any,\n  field: any,\n  icon: any,\n  iconButton: any,\n  menu: any,\n  name: string,\n  primary: any,\n  radio: any,\n  ripple: RippleVariables,\n  shadow: string,\n  snackBar: SnackBarVariables,\n  text: any,\n  tooltip: TooltipVariables,\n  typography: TypographyVariables,\n  warn: any,\n  zIndex: any\n}"
    },
    {
      "name": "StyleMap5",
      "children": "interface StyleMap5 {\n  /** global theme */\n  classes: any | string,\n  /** requireUpdate */\n  classesWithTheme: any,\n  css: any | string,\n  id: string,\n  priority: number,\n  requireUpdate: boolean,\n  styles: StylesFn2 | Styles2,\n  type: TypeStyle\n}"
    },
    {
      "name": "Styles2",
      "children": "interface Styles2 {\n  /** Prefix name */\n  $name: string\n}"
    },
    {
      "name": "ButtonVariables",
      "children": "interface ButtonVariables {\n  appearance: any,\n  root: StyleContainer,\n  size: any\n}"
    },
    {
      "name": "CheckboxVariables",
      "children": "interface CheckboxVariables {\n  root: StyleContainer,\n  unchecked: StyleContainer\n}"
    },
    {
      "name": "RippleVariables",
      "children": "interface RippleVariables {\n  duration: number,\n  transition: any\n}"
    },
    {
      "name": "SnackBarVariables",
      "children": "interface SnackBarVariables {\n  root: StyleContainer\n}"
    },
    {
      "name": "TooltipVariables",
      "children": "interface TooltipVariables {\n  root: StyleContainer\n}"
    },
    {
      "name": "TypographyTypeVariables",
      "children": "interface TypographyTypeVariables {\n  fontFamily: string,\n  fontSize: string,\n  fontWeight: number,\n  gutterBottom: number,\n  gutterTop: number,\n  letterSpacing: string,\n  textTransform: string\n}"
    },
    {
      "name": "TypographyVariables",
      "children": "interface TypographyVariables {\n  fontFamily: string,\n  fontSize: number,\n  gutterBottom: number,\n  gutterTop: number,\n  htmlFontSize: number,\n  /** `lyTyp` */\n  lyTyp: any,\n  root: StyleContainer\n}"
    }
  ],
  "variableList": [
    {
      "name": "IS_CORE_THEME",
      "children": "const IS_CORE_THEME = new InjectionToken<true>('ly.is.root')"
    },
    {
      "name": "THEME_VARIABLES",
      "children": "const THEME_VARIABLES = new InjectionToken<PaletteVariables>('ly.theme.variables')"
    },
    {
      "name": "DEFAULT_BG",
      "children": "const DEFAULT_BG = \"primary\""
    },
    {
      "name": "DEFAULT_VALUE",
      "children": "const DEFAULT_VALUE = \"\""
    },
    {
      "name": "STYLE_PRIORITY",
      "children": "const STYLE_PRIORITY = -1"
    },
    {
      "name": "DEFAULT_COLOR",
      "children": "const DEFAULT_COLOR = \"primary\""
    },
    {
      "name": "BACKDROP_STYLES",
      "children": "const BACKDROP_STYLES = ({\n  backdrop: {\n    pointerEvents: 'all',\n    userSelect: 'none'\n  }\n})"
    },
    {
      "name": "HAMMER_GESTURES_EVENTS",
      "children": "const HAMMER_GESTURES_EVENTS = [\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft',\n  'slidecancel'\n]"
    },
    {
      "name": "LY_HAMMER_OPTIONS",
      "children": "const LY_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('LY_HAMMER_OPTIONS')"
    },
    {
      "name": "hasV8BreakIterator",
      "children": "const hasV8BreakIterator = (typeof(Intl) !== 'undefined' && (Intl as any).v8BreakIterator)"
    },
    {
      "name": "Shadows",
      "children": "const Shadows = [\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 1, 3, 0, 0, 1, 1, 0, 0, 2, 1, -1],\n  [0, 1, 5, 0, 0, 2, 2, 0, 0, 3, 1, -2],\n  [0, 1, 8, 0, 0, 3, 4, 0, 0, 3, 3, -2],\n  [0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0],\n  [0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0],\n  [0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0],\n  [0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1],\n  [0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2],\n  [0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2],\n  [0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3],\n  [0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3],\n  [0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4],\n  [0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4],\n  [0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4],\n  [0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5],\n  [0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5],\n  [0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5],\n  [0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6],\n  [0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6],\n  [0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7],\n  [0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7],\n  [0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7],\n  [0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8],\n  [0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8]\n]"
    },
    {
      "name": "chroma",
      "children": "const chroma = _chroma"
    },
    {
      "name": "shadowAmbientShadowOpacity",
      "children": "const shadowAmbientShadowOpacity = 0.12"
    },
    {
      "name": "shadowKeyPenumbraOpacity",
      "children": "const shadowKeyPenumbraOpacity = 0.14"
    },
    {
      "name": "shadowKeyUmbraOpacity",
      "children": "const shadowKeyUmbraOpacity = 0.2"
    },
    {
      "name": "LyPaperMixinBase",
      "children": "const LyPaperMixinBase = mixinStyleUpdater(\nmixinBg(\n  mixinColor(\n    mixinRaised(\n      mixinOutlined(\n        mixinElevation(\n          mixinShadowColor(\n            mixinDisableRipple(LyPaperBase))))))))"
    },
    {
      "name": "LY_THEME",
      "children": "const LY_THEME = new InjectionToken<ThemeConfig | ThemeConfig[]>('ly_theme_config')"
    },
    {
      "name": "LY_THEME_GLOBAL_VARIABLES",
      "children": "const LY_THEME_GLOBAL_VARIABLES = new InjectionToken<PartialThemeVariables>('ly.theme.global.variables')"
    },
    {
      "name": "LY_THEME_NAME",
      "children": "const LY_THEME_NAME = new InjectionToken<string>('ly.theme.name')"
    },
    {
      "name": "BOTTOM",
      "children": "const BOTTOM = \"bottom\""
    },
    {
      "name": "REF_REG_EXP",
      "children": "const REF_REG_EXP = /\\{([\\w-]+)\\}/g"
    },
    {
      "name": "STYLE_MAP5",
      "children": "const STYLE_MAP5 = new Map()"
    },
    {
      "name": "THEME_MAP",
      "children": "const THEME_MAP = new Map<string, {\n  base: string\n  change: string | null\n}>()"
    },
    {
      "name": "TOP",
      "children": "const TOP = \"top\""
    },
    {
      "name": "UndefinedValue",
      "children": "const UndefinedValue = new Undefined()"
    },
    {
      "name": "AUI_LAST_UPDATE",
      "children": "const AUI_LAST_UPDATE = \"2018-12-09T08:23:09.442Z\""
    },
    {
      "name": "AUI_VERSION",
      "children": "const AUI_VERSION = \"1.9.5-nightly.20181209-jpgmf2bo\""
    }
  ],
  "functionList": [],
  "typeAliasList": [
    {
      "name": "CanStyleUpdaterCtor",
      "children": "type CanStyleUpdaterCtor = Constructor"
    },
    {
      "name": "Constructor",
      "children": "type Constructor = any"
    },
    {
      "name": "Placement",
      "children": "type Placement = XPosition | YPosition"
    },
    {
      "name": "Style",
      "children": "type Style = string | StyleContent | MultipleStyles"
    },
    {
      "name": "StyleContent",
      "children": "type StyleContent = any"
    },
    {
      "name": "PartialThemeVariables",
      "children": "type PartialThemeVariables = Partial"
    },
    {
      "name": "ThemeVariables",
      "children": "type ThemeVariables = any"
    },
    {
      "name": "StylesFn2",
      "children": "type StylesFn2 = any"
    }
  ],
  "injectableList": [],
  "ngModuleList": [
    {
      "name": "LyOverlayModule",
      "children": "import { LyOverlayModule } from '@alyle/ui'"
    },
    {
      "name": "NgTranscludeModule",
      "children": "import { NgTranscludeModule } from '@alyle/ui'"
    },
    {
      "name": "LyThemeModule",
      "children": "import { LyThemeModule } from '@alyle/ui'"
    },
    {
      "name": "LyCommonModule",
      "children": "import { LyCommonModule } from '@alyle/ui'"
    }
  ],
  "enumerationList": [
    {
      "name": "FocusStatus",
      "children": "enum FocusStatus {\n  /** mouse and/or touch */\n  DEFAULT = \"default\",\n  /** keyboard and/or program */\n  KEYBOARD = \"keyboard\"\n}"
    },
    {
      "name": "InvertMediaQuery",
      "children": "enum InvertMediaQuery {\n  No,\n  Yes\n}"
    },
    {
      "name": "XPosition",
      "children": "enum XPosition {\n  after = \"after\",\n  before = \"before\",\n  left = \"left\",\n  right = \"right\"\n}"
    },
    {
      "name": "YPosition",
      "children": "enum YPosition {\n  above = \"above\",\n  below = \"below\"\n}"
    },
    {
      "name": "Dir",
      "children": "enum Dir {\n  ltr = \"ltr\",\n  rtl = \"rtl\"\n}"
    },
    {
      "name": "DirAlias",
      "children": "enum DirAlias {\n  after = \"after\",\n  before = \"before\",\n  \n  end = \"end\",\n  \n  start = \"start\"\n}"
    },
    {
      "name": "DirPosition",
      "children": "enum DirPosition {\n  left = \"left\",\n  right = \"right\"\n}"
    }
  ],
  "classList": [],
  "objectLiteralList": []
}