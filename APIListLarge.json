{
  "avatar": {
    "componentList": [],
    "directiveList": [
      {
        "name": "LyAvatar",
        "selector": "'ly-avatar'",
        "inputs": "[\n    'bg',\n    'color',\n    'raised',\n    'outlined',\n    'elevation',\n    'shadowColor',\n  ]",
        "exportAs": "",
        "children": "@Input() size: any"
      }
    ],
    "variableList": [
      {
        "name": "DEFAULT_BG",
        "children": "const DEFAULT_BG = \"action\""
      },
      {
        "name": "DEFAULT_SIZE",
        "children": "const DEFAULT_SIZE = 40"
      },
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = -2"
      }
    ],
    "ngModuleList": [
      {
        "name": "LyAvatarModule",
        "children": "import { LyAvatarModule } from '@alyle/ui/avatar'"
      }
    ]
  },
  "badge": {
    "componentList": [],
    "directiveList": [
      {
        "name": "LyBadge",
        "selector": "'ly-badge, [lyBadge]'",
        "inputs": "[\n    'bg',\n    'color',\n    'raised',\n    'disabled',\n    'outlined',\n    'elevation',\n    'shadowColor'\n  ]",
        "exportAs": "",
        "children": "/** The content for the badge */\n@Input('lyBadge') content: any\n/** The color of the badge */\n@Input() lyBadgeBg: any\n/** The position for the badge */\n@Input('lyBadgePosition') position: any"
      }
    ],
    "variableList": [
      {
        "name": "DEFAULT_BG",
        "children": "const DEFAULT_BG = \"primary\""
      },
      {
        "name": "DEFAULT_POSITION",
        "children": "const DEFAULT_POSITION = \"startTop\""
      },
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = -2"
      }
    ],
    "ngModuleList": [
      {
        "name": "LyBadgeModule",
        "children": "import { LyBadgeModule } from '@alyle/ui/badge'"
      }
    ]
  },
  "button": {
    "componentList": [
      {
        "name": "LyAnchor",
        "selector": "'a[ly-button]'",
        "inputs": "[\n    'bg',\n    'color',\n    'raised',\n    'disabled',\n    'outlined',\n    'elevation',\n    'shadowColor',\n    'disableRipple'\n  ]",
        "exportAs": "",
        "children": "/** Button appearance */\n@Input() appearance: any\n/** Button size */\n@Input() size: any\nfocus(): void"
      },
      {
        "name": "LyButton",
        "selector": "'button[ly-button]'",
        "inputs": "[\n    'bg',\n    'color',\n    'raised',\n    'disabled',\n    'outlined',\n    'elevation',\n    'shadowColor',\n    'disableRipple'\n  ]",
        "exportAs": "",
        "children": "/** Button appearance */\n@Input() appearance: any\n/** Button size */\n@Input() size: any\nfocus(): void"
      }
    ],
    "directiveList": [],
    "typeAliasList": [
      {
        "name": "LyButtonSize",
        "children": "type LyButtonSize = 'small' | 'medium' | 'large'"
      }
    ],
    "variableList": [
      {
        "name": "DEFAULT_DISABLE_RIPPLE",
        "children": "const DEFAULT_DISABLE_RIPPLE = false"
      },
      {
        "name": "DEFAULT_SIZE",
        "children": "const DEFAULT_SIZE = \"medium\""
      },
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = -2"
      }
    ],
    "ngModuleList": [
      {
        "name": "LyButtonModule",
        "children": "import { LyButtonModule } from '@alyle/ui/button'"
      }
    ]
  },
  "card": {
    "componentList": [],
    "directiveList": [
      {
        "name": "LyCard",
        "selector": "'ly-card'",
        "inputs": "[\n    'bg',\n    'color',\n    'raised',\n    'outlined',\n    'elevation',\n    'shadowColor',\n    'disableRipple',\n  ]",
        "exportAs": "",
        "children": ""
      },
      {
        "name": "LyCardActions",
        "selector": "'ly-card-actions'",
        "inputs": "",
        "exportAs": "",
        "children": "@Input() disableActionSpacing: boolean"
      },
      {
        "name": "LyCardContent",
        "selector": "'ly-card-content'",
        "inputs": "",
        "exportAs": "",
        "children": ""
      },
      {
        "name": "LyCardMedia",
        "selector": "'ly-card-media'",
        "inputs": "",
        "exportAs": "",
        "children": "@Input() bgImg: any\n/** Aspect ratio */\n@Input() ratio: any"
      }
    ],
    "variableList": [
      {
        "name": "DEFAULT_ASPECT_RATIO",
        "children": "const DEFAULT_ASPECT_RATIO = \"16:9\""
      },
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = -1"
      }
    ],
    "ngModuleList": [
      {
        "name": "LyCardModule",
        "children": "import { LyCardModule } from '@alyle/ui/card'"
      }
    ]
  },
  "carousel": {
    "componentList": [
      {
        "name": "LyCarousel",
        "selector": "'ly-carousel'",
        "inputs": "",
        "exportAs": "",
        "children": "@Input() interval: number\n@ContentChildren() lyItems: QueryList\n@Input() selectedIndex: number\n@ViewChild() slideContainer: ElementRef\n@Input() touch: any\nnext(notResetInterval?: undefined | false | true): void\nprev(): void\nstop(): void"
      }
    ],
    "directiveList": [
      {
        "name": "LyCarouselItem",
        "selector": "'ly-carousel-item'",
        "inputs": "",
        "exportAs": "",
        "children": "@Input() srcImg: any"
      }
    ],
    "variableList": [
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = -2"
      }
    ],
    "ngModuleList": [
      {
        "name": "LyCarouselModule",
        "children": "import { LyCarouselModule } from '@alyle/ui/carousel'"
      }
    ]
  },
  "checkbox": {
    "componentList": [
      {
        "name": "LyCheckbox",
        "selector": "'ly-checkbox'",
        "inputs": "[\n    'disableRipple'\n  ]",
        "exportAs": "'lyCheckbox'",
        "children": "/** Event emitted when the checkbox's `checked` value changes. */\n@Output() change: EventEmitter\n/** The value attribute of the native input element */\n@Input() value: string\n/** Whether the checkbox is checked. */\n@Input() checked: any\n@Input() color: any\n@Input() disabled: any\n@Input() required: any\n/** Toggles the `checked` state of the checkbox. */\ntoggle(): void"
      }
    ],
    "directiveList": [],
    "classList": [],
    "variableList": [
      {
        "name": "DEFAULT_DISABLE_RIPPLE",
        "children": "const DEFAULT_DISABLE_RIPPLE = false"
      },
      {
        "name": "DEFAULT_WITH_COLOR",
        "children": "const DEFAULT_WITH_COLOR = \"accent\""
      },
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = -2"
      }
    ],
    "ngModuleList": [
      {
        "name": "LyCheckboxModule",
        "children": "import { LyCheckboxModule } from '@alyle/ui/checkbox'"
      }
    ]
  },
  "divider": {
    "componentList": [],
    "directiveList": [
      {
        "name": "LyDivider",
        "selector": "'ly-divider'",
        "inputs": "",
        "exportAs": "",
        "children": "/** Add indentation (72px) */\n@Input() inset: any"
      }
    ],
    "ngModuleList": [
      {
        "name": "LyDividerModule",
        "children": "import { LyDividerModule } from '@alyle/ui/divider'"
      }
    ]
  },
  "drawer": {
    "componentList": [
      {
        "name": "LyDrawer",
        "selector": "'ly-drawer'",
        "inputs": "",
        "exportAs": "'lyDrawer'",
        "children": "@Input() height: any\n@Input() mode: LyDrawerMode\n@Input() spacingAbove: any\n@Input() spacingAfter: any\n@Input() spacingBefore: any\n@Input() spacingBelow: any\n@Input() width: any\n@Input() hasBackdrop: any\n@Input() opened: any\n@Input() position: any\ntoggle(): void"
      }
    ],
    "directiveList": [
      {
        "name": "LyDrawerContainer",
        "selector": "'ly-drawer-container'",
        "inputs": "",
        "exportAs": "",
        "children": ""
      },
      {
        "name": "LyDrawerContent",
        "selector": "'ly-drawer-content'",
        "inputs": "",
        "exportAs": "",
        "children": ""
      }
    ],
    "typeAliasList": [
      {
        "name": "LyDrawerMode",
        "children": "type LyDrawerMode = 'side' | 'over'"
      },
      {
        "name": "LyDrawerPosition",
        "children": "type LyDrawerPosition = Placement"
      }
    ],
    "variableList": [
      {
        "name": "DEFAULT_MODE",
        "children": "const DEFAULT_MODE = \"side\""
      },
      {
        "name": "DEFAULT_POSITION",
        "children": "const DEFAULT_POSITION = XPosition.before"
      },
      {
        "name": "DEFAULT_VALUE",
        "children": "const DEFAULT_VALUE = \"\""
      },
      {
        "name": "DEFAULT_WIDTH",
        "children": "const DEFAULT_WIDTH = \"230px\""
      },
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = -2"
      }
    ],
    "ngModuleList": [
      {
        "name": "LyDrawerModule",
        "children": "import { LyDrawerModule } from '@alyle/ui/drawer'"
      }
    ]
  },
  "field": {
    "componentList": [
      {
        "name": "LyField",
        "selector": "'ly-field'",
        "inputs": "",
        "exportAs": "'lyFormField'",
        "children": "@Input() persistentHint: boolean\n/** The field appearance style. */\n@Input() appearance: any\n/** Theme color for the component. */\n@Input() color: any\nerrorState: any\n/** Whether the label is floating. */\n@Input() floatingLabel: any\n@Input() fullWidth: any\nonFocus(): void"
      }
    ],
    "directiveList": [
      {
        "name": "LyError",
        "selector": "'ly-error'",
        "inputs": "",
        "exportAs": "",
        "children": "classes: any"
      },
      {
        "name": "LyNativeControl",
        "selector": "'input[lyInput], textarea[lyInput], input[lyNativeControl], textarea[lyNativeControl], select[lyNativeControl]'",
        "inputs": "",
        "exportAs": "'LyNativeControl'",
        "children": "errorState: boolean\nstateChanges: Subject\n/** Whether the input is disabled. */\n@HostBinding() @Input() disabled: any\nempty: any\nfloatingLabel: any\nfocused: any\n@Input() placeholder: any\n@HostBinding() @Input() required: any\n/** Focuses the input. */\nfocus(): void"
      },
      {
        "name": "LyHint",
        "selector": "'ly-field > ly-hint'",
        "inputs": "",
        "exportAs": "",
        "children": "classes: any\n@Input() align: any"
      },
      {
        "name": "LyLabel",
        "selector": "'ly-field > ly-label'",
        "inputs": "",
        "exportAs": "",
        "children": ""
      },
      {
        "name": "LyPlaceholder",
        "selector": "'ly-field > ly-placeholder'",
        "inputs": "",
        "exportAs": "",
        "children": ""
      },
      {
        "name": "LyPrefix",
        "selector": "'[lyPrefix]'",
        "inputs": "",
        "exportAs": "",
        "children": ""
      },
      {
        "name": "LySuffix",
        "selector": "'[lySuffix]'",
        "inputs": "",
        "exportAs": "",
        "children": ""
      }
    ],
    "variableList": [
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = -2"
      },
      {
        "name": "DEFAULT_APPEARANCE",
        "children": "const DEFAULT_APPEARANCE = \"standard\""
      },
      {
        "name": "DEFAULT_WITH_COLOR",
        "children": "const DEFAULT_WITH_COLOR = \"primary\""
      },
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = -2"
      },
      {
        "name": "inputText",
        "children": "const inputText = [\n  'text',\n  'number',\n  'password',\n  'search',\n  'tel',\n  'url'\n]"
      },
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = -2"
      }
    ],
    "classList": [],
    "ngModuleList": [
      {
        "name": "LyFieldModule",
        "children": "import { LyFieldModule } from '@alyle/ui/field'"
      }
    ],
    "typeAliasList": [
      {
        "name": "LyHintAlign",
        "children": "type LyHintAlign = 'before' | 'after'"
      }
    ]
  },
  "grid": {
    "componentList": [],
    "directiveList": [
      {
        "name": "LyGrid",
        "selector": "'ly-grid[container]'",
        "inputs": "",
        "exportAs": "",
        "children": "/**\n * Defines the `align-items` style property.\n * Support breakpoints\n */\n@Input() alignItems: any\n/**\n * Defines the justify-content style property.\n * Support breakpoints\n */\n@Input() direction: any\n/**\n * Defines the justify-content style property.\n * Support breakpoints\n */\n@Input() justify: any\n/**\n * Defines the space between the component with the `item` attribute.\n * Support breakpoints\n */\n@Input() spacing: any\n@Input() spacingX: any\n@Input() spacingY: any"
      },
      {
        "name": "LyGridItem",
        "selector": "'ly-grid[item]'",
        "inputs": "",
        "exportAs": "",
        "children": "/**\n * Defines the number of grids\n * Support breakpoints\n */\n@Input() col: any\n/**\n * Defines the order style property.\n * Support breakpoints\n */\n@Input() order: any"
      }
    ],
    "typeAliasList": [
      {
        "name": "AlignItems",
        "children": "type AlignItems = 'start' | 'center' | 'end' | 'stretch' | 'baseline'"
      },
      {
        "name": "Direction",
        "children": "type Direction = 'row' | 'rowReverse' | 'column' | 'columnReverse'"
      },
      {
        "name": "Justify",
        "children": "type Justify = 'start' | 'center' | 'end' | 'between' | 'around' | 'evenly'"
      }
    ],
    "variableList": [
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = -1"
      }
    ],
    "ngModuleList": [
      {
        "name": "LyGridModule",
        "children": "import { LyGridModule } from '@alyle/ui/grid'"
      }
    ]
  },
  "icon": {
    "componentList": [],
    "directiveList": [
      {
        "name": "LyIcon",
        "selector": "'ly-icon'",
        "inputs": "[\n    'bg',\n    'color',\n    'raised',\n    'outlined',\n    'elevation',\n    'shadowColor',\n  ]",
        "exportAs": "",
        "children": "@Input() fontIcon: any\n@Input() fontSet: any\n@Input() icon: any"
      }
    ],
    "variableList": [
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = -2"
      },
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = -2"
      }
    ],
    "ngModuleList": [
      {
        "name": "LyIconModule",
        "children": "import { LyIconModule } from '@alyle/ui/icon'"
      }
    ],
    "injectableList": [
      {
        "name": "LyIconService",
        "children": "@Injectable({\n  providedIn: 'root'\n})\nclass LyIconService {\n  defaultSvgIcon: SVGElement\n  defaultClass: any\n  defaultClassPrefix: any\n  addSvgIconLiteral(key: string, literal: SafeHtml): void\n  getFontClass(key: string): void\n  getSvg(key: string): void\n  /**\n   * Register new font class alias\n   * demo:\n   * For FontAwesome\n   * registerFontClass({\n   *   key: 'fa',\n   *   class: 'fa'\n   *   prefix: 'fa-'\n   * })\n   */\n  registerFontClass(opt: FontClassOptions): void\n  /** Set default className for `ly-icon` */\n  setDefaultClass(className?: undefined | string, prefix?: undefined | string): void\n  setSvg(key: string, url: SafeResourceUrl): void\n}"
      }
    ],
    "interfaceList": [
      {
        "name": "FontClassOptions",
        "children": "interface FontClassOptions {\n  /** Class name */\n  class: undefined | string,\n  key: string,\n  /** Frefix class */\n  prefix: undefined | string\n}"
      },
      {
        "name": "SvgIcon",
        "children": "interface SvgIcon {\n  obs: Observable,\n  svg: SVGElement\n}"
      }
    ]
  },
  "list": {
    "componentList": [
      {
        "name": "LyListItem",
        "selector": "'ly-list-item, a[ly-list-item], button[ly-list-item]'",
        "inputs": "[\n    'bg',\n    'color',\n    'raised',\n    'disabled',\n    'outlined',\n    'elevation',\n    'shadowColor',\n    'disableRipple'\n  ]",
        "exportAs": "'lyListItem'",
        "children": ""
      }
    ],
    "directiveList": [
      {
        "name": "LyLine",
        "selector": "'[ly-line]'",
        "inputs": "",
        "exportAs": "",
        "children": ""
      },
      {
        "name": "LyList",
        "selector": "'ly-list'",
        "inputs": "",
        "exportAs": "'lyList'",
        "children": ""
      },
      {
        "name": "LyListIcon",
        "selector": "'[ly-list-icon]'",
        "inputs": "",
        "exportAs": "",
        "children": "/** Disable extra padding */\n@Input() disablePadding: any"
      }
    ],
    "variableList": [
      {
        "name": "DISABLE_PADDING",
        "children": "const DISABLE_PADDING = false"
      },
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = 2"
      }
    ],
    "ngModuleList": [
      {
        "name": "LyListModule",
        "children": "import { LyListModule } from '@alyle/ui/list'"
      }
    ]
  },
  "menu": {
    "componentList": [
      {
        "name": "LyMenu",
        "selector": "'ly-menu'",
        "inputs": "",
        "exportAs": "'lyMenu'",
        "children": "@HostBinding() menuLeave2: any\n/** Position where the menu will be placed. */\n@Input() placement: Placement\n@Input() ref: LyMenuTriggerFor\n/** The x-axis position of the menu. */\n@Input() xPosition: XPosition\n/** The y-axis position of the menu. */\n@Input() yPosition: YPosition\nendAnimation(e: any): void"
      }
    ],
    "directiveList": [
      {
        "name": "LyMenuItem",
        "selector": "'[ly-menu-item]'",
        "inputs": "",
        "exportAs": "",
        "children": ""
      },
      {
        "name": "LyMenuTriggerFor",
        "selector": "'[lyMenuTriggerFor]'",
        "inputs": "",
        "exportAs": "",
        "children": "@Input() lyMenuTriggerFor: TemplateRef\ndestroy(): void\ndetach(): void"
      }
    ],
    "variableList": [
      {
        "name": "ANIMATIONS",
        "children": "const ANIMATIONS = [\n  trigger('menuEnter', [\n    transition('void => in', [\n      animate('125ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n        style({\n          opacity: 0,\n          transform: 'scale(0.8)'\n        }),\n        style({\n          opacity: 1,\n          transform: 'scale(1)'\n        })\n      ]))\n    ]),\n  ]),\n  trigger('menuLeave', [\n    transition('* => void', animate('150ms linear', style({ opacity: 0 })))\n  ])\n]"
      },
      {
        "name": "DEFAULT_PLACEMENT",
        "children": "const DEFAULT_PLACEMENT = YPosition.below"
      },
      {
        "name": "DEFAULT_XPOSITION",
        "children": "const DEFAULT_XPOSITION = XPosition.after"
      },
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = -1"
      }
    ],
    "ngModuleList": [
      {
        "name": "LyMenuModule",
        "children": "import { LyMenuModule } from '@alyle/ui/menu'"
      }
    ]
  },
  "radio": {
    "componentList": [
      {
        "name": "LyRadio",
        "selector": "'ly-radio'",
        "inputs": "[\n    'disableRipple'\n  ]",
        "exportAs": "",
        "children": "@Output() change: EventEmitter\n@Input() checked: any\n@Input() color: any\n@Input() disabled: any\n@Input() value: any"
      },
      {
        "name": "LyRadioGroup",
        "selector": "'ly-radio-group'",
        "inputs": "",
        "exportAs": "'lyRadioGroup'",
        "children": "@Output() change: EventEmitter\n@Input() color: string\n@Input() value: any"
      }
    ],
    "directiveList": [],
    "ngModuleList": [
      {
        "name": "LyRadioModule",
        "children": "import { LyRadioModule } from '@alyle/ui/radio'"
      }
    ],
    "classList": [],
    "variableList": [
      {
        "name": "DEFAULT_COLOR",
        "children": "const DEFAULT_COLOR = \"accent\""
      },
      {
        "name": "DEFAULT_DISABLE_RIPPLE",
        "children": "const DEFAULT_DISABLE_RIPPLE = false"
      },
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = -2"
      }
    ],
    "objectLiteralList": []
  },
  "resizing-cropping-images": {
    "componentList": [
      {
        "name": "LyResizingCroppingImages",
        "selector": "'ly-img-cropper, ly-cropping'",
        "inputs": "",
        "exportAs": "",
        "children": "/** On crop new image */\n@Output() cropped: EventEmitter\n/** Emit an error when the loaded image is not valid */\n@Output() error: EventEmitter\nisCropped: boolean\n/** When is loaded image & ready for crop */\nisLoaded: boolean\n/** On loaded new image */\n@Output() loaded: EventEmitter\n@Output() scaleChange: EventEmitter\n@Input() config: any\n/** Get min scale */\nminScale: any\n/** Set scale */\n@Input() scale: any\ncenter(): void\n/** Clean the img cropper */\nclean(): void\n/**\n * Crop Image\n * Resizing & cropping image\n */\ncrop(config?: ImgCropperConfig): void\nfit(): void\n/** Ajustar a la pantalla */\nfitToScreen(): void\nrotate(degrees: number): void\nselectInputEvent(img: Event): void\n/** Load Image from URL */\nsetImageUrl(src: string, fn?: undefined | any): void\n/** Set the size of the image, the values can be 0 between 1, where 1 is the original size */\nsetScale(size?: undefined | number, noAutoCrop?: undefined | false | true): void\nupdatePosition(x?: undefined | number, y?: undefined | number): void\n/** + */\nzoomIn(): void\n/** - */\nzoomOut(): void"
      }
    ],
    "directiveList": [],
    "enumerationList": [
      {
        "name": "ImgResolution",
        "children": "enum ImgResolution {\n  /** Resizing & cropping */\n  Default,\n  /** Only cropping */\n  OriginalImage\n}"
      }
    ],
    "interfaceList": [
      {
        "name": "ImgCropperConfig",
        "children": "interface ImgCropperConfig {\n  /** Set anti-aliased( default: true) */\n  antiAliased: undefined | false | true,\n  autoCrop: undefined | false | true,\n  /** Background color( default: null), if is null in png is transparent but not in jpg */\n  fill: string | null,\n  /** Cropper area height */\n  height: number,\n  output: ImgOutput | ImgResolution,\n  /** If this is not defined, the new image will be automatically defined */\n  type: undefined | string,\n  /** Cropper area width */\n  width: number\n}"
      },
      {
        "name": "ImgCropperEvent",
        "children": "interface ImgCropperEvent {\n  /** Cropped image data URL */\n  dataURL: undefined | string,\n  height: undefined | number,\n  name: string,\n  /** Original Image data URL */\n  originalDataURL: undefined | string,\n  position: undefined | any,\n  /** Current rotation in degrees */\n  rotation: undefined | number,\n  scale: undefined | number,\n  /** Filetype */\n  type: undefined | string,\n  width: undefined | number\n}"
      },
      {
        "name": "ImgOutput",
        "children": "interface ImgOutput {\n  height: number,\n  width: number\n}"
      }
    ],
    "variableList": [
      {
        "name": "CONFIG_DEFAULT",
        "children": "const CONFIG_DEFAULT = <ImgCropperConfig>{\n  width: 250,\n  height: 200,\n  output: ImgResolution.Default,\n  antiAliased: true\n}"
      },
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = -2"
      }
    ],
    "ngModuleList": [
      {
        "name": "LyResizingCroppingImageModule",
        "children": "import { LyResizingCroppingImageModule } from '@alyle/ui/resizing-cropping-images'"
      }
    ]
  },
  "responsive": {
    "componentList": [],
    "directiveList": [
      {
        "name": "MediaDirective",
        "selector": "'[lyShow], [lyHide]'",
        "inputs": "",
        "exportAs": "",
        "children": "/** Hides the item when the value is resolved as true */\n@Input() lyHide: any\n/** Shows the item when the value is resolved as true */\n@Input() lyShow: any"
      }
    ],
    "objectLiteralList": [],
    "variableList": [
      {
        "name": "MEDIA_PRIORITY",
        "children": "const MEDIA_PRIORITY = 999"
      }
    ],
    "ngModuleList": [
      {
        "name": "ResponsiveModule",
        "children": "import { ResponsiveModule } from '@alyle/ui/responsive'"
      }
    ]
  },
  "schematics/component": {
    "componentList": [],
    "directiveList": [],
    "functionList": []
  },
  "schematics/directive": {
    "componentList": [],
    "directiveList": [],
    "functionList": []
  },
  "schematics/ng-add": {
    "componentList": [],
    "directiveList": [],
    "functionList": [],
    "variableList": [
      {
        "name": "hammerjsImportStatement",
        "children": "const hammerjsImportStatement = `import 'hammerjs';`"
      },
      {
        "name": "CHROMA_JS_VERSION",
        "children": "const CHROMA_JS_VERSION = \"^1.3.6\""
      },
      {
        "name": "HAMMERJS_VERSION",
        "children": "const HAMMERJS_VERSION = \"^2.0.8\""
      }
    ],
    "interfaceList": [
      {
        "name": "Schema",
        "children": "interface Schema {\n  gestures: boolean,\n  project: string,\n  themes: any\n}"
      }
    ]
  },
  "schematics/utils": {
    "componentList": [],
    "directiveList": [],
    "functionList": []
  },
  "select": {
    "componentList": [
      {
        "name": "LyOption",
        "selector": "'ly-option'",
        "inputs": "[\n    'bg',\n    'color',\n    'raised',\n    'disabled',\n    'outlined',\n    'elevation',\n    'shadowColor',\n    'disableRipple'\n  ]",
        "exportAs": "",
        "children": "isSelected: any\n/** Tracks simple string values bound to the option element. */\n@Input('value') value: any\n/** The displayed value of the option. */\nviewValue: any\nselect(): void\ntoggle(): void"
      },
      {
        "name": "LySelect",
        "selector": "'ly-select'",
        "inputs": "['tabIndex']",
        "exportAs": "'lySelect'",
        "children": "errorState: boolean\n@ContentChildren() options: QueryList\nstateChanges: Subject\n@ViewChild() templateRef: TemplateRef\n/** Whether the input is disabled. */\n@Input() disabled: any\nempty: any\nfloatingLabel: any\nfocused: any\n@Input() multiple: any\n@Input() placeholder: any\n@Input() required: any\n/** Current selecteds */\nselected: any\n/** The value displayed in the trigger. */\ntriggerValue: any\n@Input() valueKey: any\nclose(): void\n/** Focuses the input. */\nfocus(): void\n/** The registered callback function called when a change event occurs on the input element. */\nonChange(_: any): void\n/** The registered callback function called when a blur event occurs on the input element. */\nonTouched(): void\nopen(): void\n/** Registers a function called when the control value changes. */\nregisterOnChange(fn: any): void\n/** Registers a function called when the control is touched. */\nregisterOnTouched(fn: any): void\n/**\n * Disables the select. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n */\nsetDisabledState(isDisabled: boolean): void\n/** Sets the \"value\" property on the input element. */\nwriteValue(value: any): void"
      }
    ],
    "directiveList": [],
    "variableList": [
      {
        "name": "DEFAULT_DISABLE_RIPPLE",
        "children": "const DEFAULT_DISABLE_RIPPLE = false"
      },
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = -2"
      }
    ],
    "ngModuleList": [
      {
        "name": "LySelectModule",
        "children": "import { LySelectModule } from '@alyle/ui/select'"
      }
    ]
  },
  "snack-bar": {
    "componentList": [],
    "directiveList": [
      {
        "name": "LySnackBar",
        "selector": "'ng-template[ly-snack-bar]'",
        "inputs": "",
        "exportAs": "'lySnackBar'",
        "children": "@Output() afterDismissed: EventEmitter\n@Input() duration: any\n@Input() horizontalPosition: any\n@Input() verticalPosition: YPosition\n/** Dismiss snackBar */\ndismiss(): void\nopen(): void"
      }
    ],
    "interfaceList": [
      {
        "name": "LySnackBarDismiss",
        "children": "interface LySnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action fn. */\n  dismissedByAction: boolean\n}"
      }
    ],
    "variableList": [
      {
        "name": "DEFAULT_HORIZONTAL_POSITION",
        "children": "const DEFAULT_HORIZONTAL_POSITION = XPosition.after"
      },
      {
        "name": "DEFAULT_VERTICAL_POSITION",
        "children": "const DEFAULT_VERTICAL_POSITION = YPosition.below"
      },
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = -2"
      },
      {
        "name": "DEFAULT_DURATION",
        "children": "const DEFAULT_DURATION = 6000"
      }
    ],
    "classList": [],
    "ngModuleList": [
      {
        "name": "LySnackBarModule",
        "children": "import { LySnackBarModule } from '@alyle/ui/snack-bar'"
      }
    ],
    "injectableList": [
      {
        "name": "LySnackBarService",
        "children": "@Injectable({\n  providedIn: 'root'\n})\nclass LySnackBarService {\n  \n}"
      }
    ]
  },
  "root": {
    "componentList": [
      {
        "name": "LyOverlayBackdrop",
        "selector": "'ly-overlay-backdrop'",
        "inputs": "",
        "exportAs": "",
        "children": "onclick(): void"
      }
    ],
    "directiveList": [
      {
        "name": "NgTranscludeDirective",
        "selector": "'[ngTransclude]'",
        "inputs": "",
        "exportAs": "",
        "children": "getNgTransclude: any\n@Input() ngTransclude: any"
      },
      {
        "name": "LyPaper",
        "selector": "`ly-paper, [ly-paper], [ly-text]`",
        "inputs": "[\n    'bg',\n    'color',\n    'raised',\n    'outlined',\n    'elevation',\n    'shadowColor',\n    'disableRipple'\n  ]",
        "exportAs": "",
        "children": "@Input('ly-text') hasText: any"
      },
      {
        "name": "LyWithClass",
        "selector": "'[withClass]'",
        "inputs": "",
        "exportAs": "",
        "children": "@Input() withClass: any"
      }
    ],
    "interfaceList": [
      {
        "name": "ColorScheme",
        "children": "interface ColorScheme {\n  background: undefined | any,\n  bar: undefined | string,\n  /** Components variables */\n  colorShadow: undefined | string,\n  divider: undefined | string,\n  input: undefined | any,\n  text: undefined | any\n}"
      },
      {
        "name": "PaletteVariables",
        "children": "interface PaletteVariables {\n  contrast: undefined | string,\n  default: undefined | string\n}"
      },
      {
        "name": "CanBg",
        "children": "interface CanBg {\n  bg: string\n}"
      },
      {
        "name": "CanStyleUpdater",
        "children": "interface CanStyleUpdater {\n  _theme: LyTheme2,\n  setAutoContrast: any,\n  updateStyle: any\n}"
      },
      {
        "name": "RequireParamsStyleUpdater",
        "children": "interface RequireParamsStyleUpdater {\n  _theme: LyTheme2\n}"
      },
      {
        "name": "CanColor",
        "children": "interface CanColor {\n  color: string\n}"
      },
      {
        "name": "CanDisableRipple",
        "children": "interface CanDisableRipple {\n  _removeRippleEvents: any,\n  _rippleConfig: RippleConfig,\n  _rippleContainer: ElementRef,\n  _triggerElement: ElementRef,\n  disableRipple: boolean\n}"
      },
      {
        "name": "RequireParams",
        "children": "interface RequireParams {\n  _ngZone: NgZone,\n  _theme: LyTheme2\n}"
      },
      {
        "name": "CanDisable",
        "children": "interface CanDisable {\n  disabled: boolean\n}"
      },
      {
        "name": "CanElevation",
        "children": "interface CanElevation {\n  elevation: number\n}"
      },
      {
        "name": "CanOutlined",
        "children": "interface CanOutlined {\n  outlined: boolean\n}"
      },
      {
        "name": "CanRaised",
        "children": "interface CanRaised {\n  raised: boolean\n}"
      },
      {
        "name": "CanShadowColor",
        "children": "interface CanShadowColor {\n  shadowColor: string\n}"
      },
      {
        "name": "OverlayFromTemplateRef",
        "children": "interface OverlayFromTemplateRef {\n  containerElement: HTMLDivElement,\n  /** Detach & remove */\n  destroy: any,\n  /** Detaches a view from dirty checking again of ApplicationRef. */\n  detach: any,\n  /** Function that will be called on scroll or resize event */\n  onResizeScroll: any | null,\n  /** Remove element of DOM */\n  remove: any\n}"
      },
      {
        "name": "FocusStateInfo",
        "children": "interface FocusStateInfo {\n  subject: Subject,\n  unlisten: any\n}"
      },
      {
        "name": "HammerInput",
        "children": "interface HammerInput {\n  center: any,\n  deltaX: number,\n  deltaY: number,\n  preventDefault: any\n}"
      },
      {
        "name": "HammerInstance",
        "children": "interface HammerInstance {\n  off,\n  on\n}"
      },
      {
        "name": "HammerManager",
        "children": "interface HammerManager {\n  add,\n  emit,\n  off,\n  on,\n  set\n}"
      },
      {
        "name": "HammerOptions",
        "children": "interface HammerOptions {\n  cssProps: undefined | any,\n  domEvents: undefined | false | true,\n  enable: boolean | any,\n  inputClass: HammerInput,\n  inputTarget: EventTarget,\n  preset: any,\n  recognizers: any,\n  touchAction: undefined | string\n}"
      },
      {
        "name": "HammerStatic",
        "children": "interface HammerStatic {\n  constructor,\n  Pan: Recognizer,\n  Press: Recognizer,\n  Swipe: Recognizer\n}"
      },
      {
        "name": "Recognizer",
        "children": "interface Recognizer {\n  constructor,\n  recognizeWith\n}"
      },
      {
        "name": "RippleConfig",
        "children": "interface RippleConfig {\n  centered: undefined | false | true,\n  disabled: undefined | false | true,\n  percentageToIncrease: undefined | number,\n  radius: 'containerSize' | number,\n  sensitive: undefined | false | true\n}"
      },
      {
        "name": "SelectionOpts",
        "children": "interface SelectionOpts {\n  getKey: undefined | any,\n  multiple: undefined | true,\n  /**\n * Initially selected values\n * Note: if `multiple` === `true` then `selecteds` should be of type `T[]`\n * else it should be of type `T`\n */\n  selecteds: any | any\n}"
      },
      {
        "name": "DataStyle",
        "children": "interface DataStyle {\n  id: string,\n  style: Style,\n  styleElement: HTMLStyleElement\n}"
      },
      {
        "name": "StyleData",
        "children": "interface StyleData {\n  fn: any,\n  /** Class Id */\n  id: string,\n  key: string,\n  styleContainer: any,\n  styleContent: any\n}"
      },
      {
        "name": "DefaultVal",
        "children": "interface DefaultVal {\n  default: string\n}"
      },
      {
        "name": "PaletteColor",
        "children": "interface PaletteColor {\n  contrast: undefined | string,\n  /** shadow color */\n  shadow: undefined | string\n}"
      },
      {
        "name": "ThemeConfig",
        "children": "interface ThemeConfig {\n  accent: any,\n  animations: any,\n  avatar: AvatarVariables,\n  background: any,\n  badge: any,\n  button: ButtonVariables,\n  checkbox: CheckboxVariables,\n  colorShadow: undefined | string,\n  direction: Dir,\n  disabled: any,\n  /** color for divider */\n  divider: string,\n  drawer: any,\n  field: any,\n  icon: any,\n  iconButton: any,\n  menu: any,\n  name: string,\n  paper: any,\n  primary: any,\n  radio: any,\n  ripple: RippleVariables,\n  shadow: string,\n  snackBar: SnackBarVariables,\n  text: any,\n  tooltip: TooltipVariables,\n  typography: TypographyVariables,\n  warn: any,\n  zIndex: any\n}"
      },
      {
        "name": "StyleGroup",
        "children": "interface StyleGroup {\n  $keyframes: Keyframes,\n  /** Prefix name */\n  $name: undefined | string\n}"
      },
      {
        "name": "StyleMap5",
        "children": "interface StyleMap5 {\n  /** global theme */\n  classes: any | string,\n  /** requireUpdate */\n  classesWithTheme: undefined | any,\n  css: any | string,\n  id: string | null,\n  /** Only for styles of TypeStyle.one */\n  parentStyle: Styles,\n  priority: number | null,\n  requireUpdate: undefined | false | true,\n  styles: Styles,\n  type: TypeStyle\n}"
      },
      {
        "name": "AvatarVariables",
        "children": "interface AvatarVariables {\n  root: StyleContainer\n}"
      },
      {
        "name": "ButtonVariables",
        "children": "interface ButtonVariables {\n  appearance: undefined | any,\n  root: StyleContainer,\n  size: undefined | any\n}"
      },
      {
        "name": "CheckboxVariables",
        "children": "interface CheckboxVariables {\n  root: StyleContainer,\n  unchecked: StyleContainer\n}"
      },
      {
        "name": "RippleVariables",
        "children": "interface RippleVariables {\n  duration: number,\n  transition: any\n}"
      },
      {
        "name": "SnackBarVariables",
        "children": "interface SnackBarVariables {\n  root: StyleContainer\n}"
      },
      {
        "name": "TooltipVariables",
        "children": "interface TooltipVariables {\n  root: StyleContainer\n}"
      },
      {
        "name": "TypographyTypeVariables",
        "children": "interface TypographyTypeVariables {\n  fontFamily: undefined | string,\n  fontSize: undefined | string,\n  fontWeight: undefined | number,\n  gutterBottom: undefined | number,\n  gutterTop: undefined | number,\n  letterSpacing: undefined | string,\n  textTransform: undefined | string\n}"
      },
      {
        "name": "TypographyVariables",
        "children": "interface TypographyVariables {\n  fontFamily: string,\n  fontSize: number,\n  gutterBottom: number,\n  gutterTop: number,\n  htmlFontSize: number,\n  /** `lyTyp` */\n  lyTyp: any,\n  root: StyleContainer\n}"
      }
    ],
    "variableList": [
      {
        "name": "IS_CORE_THEME",
        "children": "const IS_CORE_THEME = new InjectionToken<true>('ly.is.root')"
      },
      {
        "name": "THEME_VARIABLES",
        "children": "const THEME_VARIABLES = new InjectionToken<PaletteVariables>('ly.theme.variables')"
      },
      {
        "name": "DEFAULT_BG",
        "children": "const DEFAULT_BG = \"primary\""
      },
      {
        "name": "DEFAULT_VALUE",
        "children": "const DEFAULT_VALUE = \"\""
      },
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = -1"
      },
      {
        "name": "DEFAULT_COLOR",
        "children": "const DEFAULT_COLOR = \"primary\""
      },
      {
        "name": "DEFAULT_TAB_INDEX",
        "children": "const DEFAULT_TAB_INDEX = 0"
      },
      {
        "name": "BACKDROP_STYLES",
        "children": "const BACKDROP_STYLES = ({\n  backdrop: {\n    pointerEvents: 'all',\n    userSelect: 'none'\n  }\n})"
      },
      {
        "name": "HAMMER_GESTURES_EVENTS",
        "children": "const HAMMER_GESTURES_EVENTS = [\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft',\n  'slidecancel'\n]"
      },
      {
        "name": "LY_HAMMER_OPTIONS",
        "children": "const LY_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('LY_HAMMER_OPTIONS')"
      },
      {
        "name": "hasV8BreakIterator",
        "children": "const hasV8BreakIterator = (typeof(Intl) !== 'undefined' && (Intl as any).v8BreakIterator)"
      },
      {
        "name": "INITIAL_WH",
        "children": "const INITIAL_WH = \"initial\""
      },
      {
        "name": "Shadows",
        "children": "const Shadows = [\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 1, 3, 0, 0, 1, 1, 0, 0, 2, 1, -1],\n  [0, 1, 5, 0, 0, 2, 2, 0, 0, 3, 1, -2],\n  [0, 1, 8, 0, 0, 3, 4, 0, 0, 3, 3, -2],\n  [0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0],\n  [0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0],\n  [0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0],\n  [0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1],\n  [0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2],\n  [0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2],\n  [0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3],\n  [0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3],\n  [0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4],\n  [0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4],\n  [0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4],\n  [0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5],\n  [0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5],\n  [0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5],\n  [0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6],\n  [0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6],\n  [0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7],\n  [0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7],\n  [0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7],\n  [0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8],\n  [0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8]\n]"
      },
      {
        "name": "chroma",
        "children": "const chroma = _chroma"
      },
      {
        "name": "shadowAmbientShadowOpacity",
        "children": "const shadowAmbientShadowOpacity = 0.12"
      },
      {
        "name": "shadowKeyPenumbraOpacity",
        "children": "const shadowKeyPenumbraOpacity = 0.14"
      },
      {
        "name": "shadowKeyUmbraOpacity",
        "children": "const shadowKeyUmbraOpacity = 0.2"
      },
      {
        "name": "DEFAULT_BG",
        "children": "const DEFAULT_BG = \"paper\""
      },
      {
        "name": "LyPaperMixinBase",
        "children": "const LyPaperMixinBase = mixinStyleUpdater(\nmixinBg(\n  mixinColor(\n    mixinRaised(\n      mixinOutlined(\n        mixinElevation(\n          mixinShadowColor(\n            mixinDisableRipple(LyPaperBase))))))))"
      },
      {
        "name": "LY_THEME",
        "children": "const LY_THEME = new InjectionToken<ThemeConfig | ThemeConfig[]>('ly_theme_config')"
      },
      {
        "name": "LY_THEME_GLOBAL_VARIABLES",
        "children": "const LY_THEME_GLOBAL_VARIABLES = new InjectionToken<PartialThemeVariables>('ly.theme.global.variables')"
      },
      {
        "name": "LY_THEME_NAME",
        "children": "const LY_THEME_NAME = new InjectionToken<string>('ly.theme.name')"
      },
      {
        "name": "BOTTOM",
        "children": "const BOTTOM = \"bottom\""
      },
      {
        "name": "REF_REG_EXP",
        "children": "const REF_REG_EXP = /\\{([\\w-]+)\\}/g"
      },
      {
        "name": "STYLE_MAP5",
        "children": "const STYLE_MAP5 = new Map()"
      },
      {
        "name": "THEME_MAP",
        "children": "const THEME_MAP = new Map<string, {\n  base: string\n  change: string | null\n}>()"
      },
      {
        "name": "TOP",
        "children": "const TOP = \"top\""
      },
      {
        "name": "UndefinedValue",
        "children": "const UndefinedValue = new Undefined()"
      },
      {
        "name": "AUI_LAST_UPDATE",
        "children": "const AUI_LAST_UPDATE = \"2019-01-29T00:08:20.865Z\""
      },
      {
        "name": "AUI_VERSION",
        "children": "const AUI_VERSION = \"2.1.0\""
      }
    ],
    "functionList": [],
    "typeAliasList": [
      {
        "name": "CanStyleUpdaterCtor",
        "children": "type CanStyleUpdaterCtor = Constructor"
      },
      {
        "name": "Constructor",
        "children": "type Constructor = any"
      },
      {
        "name": "FocusState",
        "children": "type FocusState = 'keyboard' | 'mouse' | null"
      },
      {
        "name": "RecognizerStatic",
        "children": "type RecognizerStatic = any"
      },
      {
        "name": "Placement",
        "children": "type Placement = XPosition | YPosition"
      },
      {
        "name": "Style",
        "children": "type Style = string | StyleContent | MultipleStyles"
      },
      {
        "name": "StyleContent",
        "children": "type StyleContent = any"
      },
      {
        "name": "PartialThemeVariables",
        "children": "type PartialThemeVariables = RecursivePartial"
      },
      {
        "name": "ThemeVariables",
        "children": "type ThemeVariables = any"
      },
      {
        "name": "StyleContainerFn",
        "children": "/** StyleContainer or fn that return StyleContainer */\ntype StyleContainerFn = any | StyleContainer | string | null | undefined"
      }
    ],
    "injectableList": [
      {
        "name": "ElementObserver",
        "children": "@Injectable({providedIn: 'root'})\nclass ElementObserver {\n  /** Destroy Observer */\n  destroy(elementOrRef: Element | ElementRef): void\n  observe(elementOrRef: Element | ElementRef, fn: MutationCallback, options?: MutationObserverInit): void\n}"
      },
      {
        "name": "MutationObserverFactory",
        "children": "@Injectable({providedIn: 'root'})\nclass MutationObserverFactory {\n  create(callback: MutationCallback): void\n}"
      },
      {
        "name": "LyOverlay",
        "children": "@Injectable({\n  providedIn: 'root'\n})\nclass LyOverlay {\n  create(template: TemplateRef | string, context?: any, config?: OverlayConfig): void\n}"
      },
      {
        "name": "LyOverlayContainer",
        "children": "@Injectable({\n  providedIn: 'root'\n})\nclass LyOverlayContainer {\n  containerElement: any\n}"
      },
      {
        "name": "WinResize",
        "children": "@Injectable({\n  providedIn: 'root'\n})\nclass WinResize {\n  resize$: Observable\n}"
      },
      {
        "name": "WinScroll",
        "children": "@Injectable({\n  providedIn: 'root'\n})\nclass WinScroll {\n  scroll$: Observable\n}"
      },
      {
        "name": "LyFocusState",
        "children": "@Injectable({\n  providedIn: 'root'\n})\nclass LyFocusState {\n  focusElement(element: HTMLElement | ElementRef, origin: FocusState, options: FocusOptions): void\n  listen(element: HTMLElement | ElementRef, keyElement?: HTMLElement | ElementRef): void\n  unlisten(element: HTMLElement | ElementRef): void\n}"
      },
      {
        "name": "LyHammerGestureConfig",
        "children": "@Injectable()\nclass LyHammerGestureConfig {\n  events: any\n  /**\n   * Properties whose default values can be overridden for a given event.\n   * Different sets of properties apply to different events.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](http://hammerjs.github.io/).\n   */\n  options: any\n  /**\n   * Maps gesture event names to a set of configuration options\n   * that specify overrides to the default values for specific properties.\n   */\n  overrides: any\n  buildHammer(element: HTMLElement): void\n}"
      },
      {
        "name": "LyRippleService",
        "children": "@Injectable({\n  providedIn: 'root'\n})\nclass LyRippleService {\n  classes: any\n}"
      },
      {
        "name": "LyCoreStyles",
        "children": "@Injectable({ providedIn: 'root' })\nclass LyCoreStyles {\n  classes: any\n}"
      },
      {
        "name": "CoreTheme",
        "children": "@Injectable({\n  providedIn: 'root'\n})\nclass CoreTheme {\n  firstElement: HTMLElement\n  mediaStyleContainer: HTMLElement\n  primaryStyleContainer: HTMLElement\n  renderer: Renderer2\n  secondaryStyleContainer: HTMLElement\n  themes: Set\n  /** add new theme */\n  add(theme: ThemeVariables): void\n  get(name: string): void\n  getStyleMap(name: string): void\n  updateClassName(element: any, renderer: Renderer2, newClassname: string, oldClassname?: undefined | string): void\n}"
      },
      {
        "name": "LyTheme2",
        "children": "@Injectable()\nclass LyTheme2 {\n  config: ThemeVariables\n  core: CoreTheme\n  elements: Map\n  initialTheme: string\n  /** Get Theme Variables */\n  variables: any\n  /**\n   * Create a simple style\n   * return className\n   */\n  addSimpleStyle(id: string, css: StyleContainer | any, priority?: undefined | number, parentStyle?: Styles): void\n  /** Add a new dynamic style, use only within @Input() */\n  addStyle(id: string, style?: StyleContainerFn, el?: any, instance?: string | null, priority?: number | null, parentStyle?: Styles): void\n  /** Add new add a new style sheet */\n  addStyleSheet(styles: any, priority?: undefined | number): void\n  requestAnimationFrame(fn: any): void\n  setTheme(nam: string): void\n  setUpTheme(themeName: string): void\n  /** Toggle right-to-left/left-to-right */\n  toggleDirection(): void\n  updateClass(element: any, renderer: Renderer2, newClass: string, oldClass?: undefined | string): void\n}"
      },
      {
        "name": "StylesInDocument",
        "children": "@Injectable({\n  providedIn: 'root'\n})\nclass StylesInDocument {\n  styleContainers: Map\n  styleElementGlobalMap: Map\n  styles: any\n}"
      }
    ],
    "ngModuleList": [
      {
        "name": "LyOverlayModule",
        "children": "import { LyOverlayModule } from '@alyle/ui'"
      },
      {
        "name": "NgTranscludeModule",
        "children": "import { NgTranscludeModule } from '@alyle/ui'"
      },
      {
        "name": "LyThemeModule",
        "children": "import { LyThemeModule } from '@alyle/ui'"
      },
      {
        "name": "LyCommonModule",
        "children": "import { LyCommonModule } from '@alyle/ui'"
      }
    ],
    "enumerationList": [
      {
        "name": "FocusStatus",
        "children": "enum FocusStatus {\n  /** mouse and/or touch */\n  DEFAULT = \"default\",\n  /** keyboard and/or program */\n  KEYBOARD = \"keyboard\"\n}"
      },
      {
        "name": "AlignAlias",
        "children": "enum AlignAlias {\n  around = \"space-around\",\n  between = \"space-between\",\n  columnReverse = \"column-reverse\",\n  end = \"flex-end\",\n  evenly = \"space-evenly\",\n  rowReverse = \"row-reverse\",\n  start = \"flex-start\",\n  wrapReverse = \"wrap-reverse\"\n}"
      },
      {
        "name": "XPosition",
        "children": "enum XPosition {\n  after = \"after\",\n  before = \"before\",\n  left = \"left\",\n  right = \"right\"\n}"
      },
      {
        "name": "YPosition",
        "children": "enum YPosition {\n  above = \"above\",\n  below = \"below\"\n}"
      },
      {
        "name": "Dir",
        "children": "enum Dir {\n  ltr = \"ltr\",\n  rtl = \"rtl\"\n}"
      },
      {
        "name": "DirAlias",
        "children": "enum DirAlias {\n  after = \"after\",\n  before = \"before\"\n}"
      },
      {
        "name": "DirPosition",
        "children": "enum DirPosition {\n  left = \"left\",\n  right = \"right\"\n}"
      }
    ],
    "classList": [],
    "objectLiteralList": []
  },
  "tabs": {
    "componentList": [
      {
        "name": "LyTab",
        "selector": "'ly-tab'",
        "inputs": "",
        "exportAs": "",
        "children": "/** Current tab index */\nindex: number"
      },
      {
        "name": "LyTabLabel",
        "selector": "'button[ly-tab-label]'",
        "inputs": "[\n    'bg',\n    'color',\n    'raised',\n    'disabled',\n    'outlined',\n    'elevation',\n    'shadowColor',\n    'disableRipple'\n  ]",
        "exportAs": "",
        "children": "/** Button appearance */\n@Input() appearance: any\n/** Button size */\n@Input() size: any\nfocus(): void"
      },
      {
        "name": "LyTabs",
        "selector": "'ly-tabs'",
        "inputs": "[\n    'bg', 'elevation', 'shadowColor'\n  ]",
        "exportAs": "'lyTabs'",
        "children": "@Output() selectedIndexChange: EventEmitter\n@Input() selectedIndexOnChange: any\n@ViewChild() tabContents: ElementRef\n@ViewChild() tabsIndicator: ElementRef\n@ContentChildren() tabsList: QueryList\n@ViewChild() tabsRef: ElementRef\n@Input() alignTabs: any\n@Input() headerPlacement: any\n@Input() indicatorColor: any\n@Input() scrollable: any\n@Input() selectedIndex: any\n@Input() textColor: any\nloadTemplate(tab: LyTab, index: number): void"
      }
    ],
    "directiveList": [
      {
        "name": "LyTabContent",
        "selector": "'[ly-tab-content]'",
        "inputs": "",
        "exportAs": "",
        "children": "template: TemplateRef"
      }
    ],
    "typeAliasList": [
      {
        "name": "AlignTabs",
        "children": "type AlignTabs = 'start' | 'center' | 'end' | 'stretch' | 'baseline'"
      },
      {
        "name": "LyTabsHeaderPlacement",
        "children": "type LyTabsHeaderPlacement = 'before' | 'after' | 'above' | 'below'"
      }
    ],
    "variableList": [
      {
        "name": "DEFAULT_BG",
        "children": "const DEFAULT_BG = \"primary\""
      },
      {
        "name": "DEFAULT_DISABLE_RIPPLE",
        "children": "const DEFAULT_DISABLE_RIPPLE = false"
      },
      {
        "name": "DEFAULT_ELEVATION",
        "children": "const DEFAULT_ELEVATION = 4"
      },
      {
        "name": "DEFAULT_HEADER_PLACEMENT",
        "children": "const DEFAULT_HEADER_PLACEMENT = \"above\""
      },
      {
        "name": "DEFAULT_INDICATOR_COLOR",
        "children": "const DEFAULT_INDICATOR_COLOR = \"accent\""
      },
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = -2"
      }
    ],
    "injectableList": [
      {
        "name": "LyTabsClassesService",
        "children": "@Injectable({\n  providedIn: 'root'\n})\nclass LyTabsClassesService {\n  classes: any\n}"
      }
    ],
    "ngModuleList": [
      {
        "name": "LyTabsModule",
        "children": "import { LyTabsModule } from '@alyle/ui/tabs'"
      }
    ]
  },
  "themes/minima": {
    "componentList": [],
    "directiveList": [
      {
        "name": "ThemeMinimaDark",
        "selector": "'[ly-theme-minima-dark]'",
        "inputs": "",
        "exportAs": "",
        "children": ""
      },
      {
        "name": "ThemeMinimaLight",
        "selector": "'[ly-theme-minima-light]'",
        "inputs": "",
        "exportAs": "",
        "children": ""
      }
    ],
    "classList": [],
    "variableList": [
      {
        "name": "contrast",
        "children": "const contrast = \"#fff\""
      },
      {
        "name": "shadow",
        "children": "const shadow = \"rgba(0, 0, 0, 1)\""
      },
      {
        "name": "contrast",
        "children": "const contrast = \"#fff\""
      },
      {
        "name": "shadow",
        "children": "const shadow = \"#333\""
      }
    ],
    "ngModuleList": [
      {
        "name": "ThemeMinimaModule",
        "children": "import { ThemeMinimaModule } from '@alyle/ui/themes/minima'"
      }
    ],
    "interfaceList": [
      {
        "name": "IMinimaTheme",
        "children": "interface IMinimaTheme {\n  constructor,\n  animations: any,\n  avatar: any,\n  badge: any,\n  bar: string,\n  breakpoints: any,\n  colorShadow: string,\n  direction: Dir,\n  divider: string,\n  field: any,\n  icon: any,\n  iconButton: any,\n  menu: any,\n  name: string,\n  ripple: any,\n  shadow: string,\n  zIndex: any,\n  colorOf,\n  getBreakpoint,\n  getDirection,\n  pxToRem,\n  accent: object,\n  action: object,\n  background: object,\n  button: object,\n  checkbox: object,\n  disabled: object,\n  drawer: object,\n  paper: object,\n  primary: object,\n  radio: object,\n  snackBar: object,\n  text: object,\n  tooltip: object,\n  typography: object,\n  warn: object\n}"
      }
    ],
    "objectLiteralList": []
  },
  "toolbar": {
    "componentList": [],
    "directiveList": [
      {
        "name": "LyToolbar",
        "selector": "'ly-toolbar'",
        "inputs": "[\n    'bg',\n    'color',\n    'raised',\n    'outlined',\n    'elevation',\n    'shadowColor'\n  ]",
        "exportAs": "",
        "children": "@Input() position: any"
      }
    ],
    "variableList": [
      {
        "name": "DEFAULT_BG",
        "children": "const DEFAULT_BG = \"background:tertiary\""
      },
      {
        "name": "DEFAULT_POSITION",
        "children": "const DEFAULT_POSITION = \"fixed\""
      },
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = -2"
      }
    ],
    "ngModuleList": [
      {
        "name": "LyToolbarModule",
        "children": "import { LyToolbarModule } from '@alyle/ui/toolbar'"
      }
    ]
  },
  "tooltip": {
    "componentList": [],
    "directiveList": [
      {
        "name": "LyTooltip",
        "selector": "'[lyTooltip]'",
        "inputs": "",
        "exportAs": "'lyTooltip'",
        "children": "@Input() lyTooltipHideDelay: number\n@Input() lyTooltipShowDelay: number\n@Input() placement: Placement\n@Input() xPosition: XPosition\n@Input() yPosition: YPosition\n@Input('lyTooltip') tooltip: any\nhide(delay?: undefined | number): void\nshow(delay?: undefined | number): void\ntoggle(): void"
      }
    ],
    "variableList": [
      {
        "name": "DEFAULT_PLACEMENT",
        "children": "const DEFAULT_PLACEMENT = YPosition.below"
      },
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = -2"
      }
    ],
    "ngModuleList": [
      {
        "name": "LyTooltipModule",
        "children": "import { LyTooltipModule } from '@alyle/ui/tooltip'"
      }
    ]
  },
  "typography": {
    "componentList": [],
    "directiveList": [
      {
        "name": "LyTypography",
        "selector": "`[lyTyp]`",
        "inputs": "",
        "exportAs": "",
        "children": "@Input() gutter: any\n@Input() gutterBottom: any\n@Input() gutterTop: any\n@Input() lyTyp: any\n/** The text will truncate with an ellipsis. */\n@Input() noWrap: any"
      }
    ],
    "variableList": [
      {
        "name": "STYLE_PRIORITY",
        "children": "const STYLE_PRIORITY = -1"
      }
    ],
    "ngModuleList": [
      {
        "name": "LyTypographyModule",
        "children": "import { LyTypographyModule } from '@alyle/ui/typography'"
      }
    ]
  }
}