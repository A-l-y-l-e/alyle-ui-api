{
  "componentList": [
    {
      "name": "LyResizingCroppingImages",
      "selector": "ly-img-cropper, ly-cropping",
      "children": "/** On crop new image */\n@Output() cropped: EventEmitter\n/** Emit an error when the loaded image is not valid */\n@Output() error: EventEmitter\nisCropped: boolean\n/** When is loaded image & ready for crop */\nisLoaded: boolean\n/** On loaded new image */\n@Output() loaded: EventEmitter\n@Output() scaleChange: EventEmitter\n@Input() config: ImgCropperConfig\n/** Get min scale */\nminScale: number\n/** Set scale */\n@Input() scale: number\ncenter(): void\nclean(): void\ncrop(config?: ImgCropperConfig): void\nfit(): void\nfitToScreen(): void\nrotate(degrees: number): void\nselectInputEvent(img: Event): void\nsetImageUrl(src: string, fn?: any): void\nsetScale(size: number, noAutoCrop?: boolean): void\nupdatePosition(x?: number, y?: number): void\nzoomIn(): void\nzoomOut(): void"
    }
  ],
  "directiveList": [],
  "enumerationList": [
    {
      "name": "ImgResolution",
      "children": "enum ImgResolution {\n  /** Resizing & cropping */\n  Default,\n  /** Only cropping */\n  OriginalImage\n}"
    }
  ],
  "interfaceList": [
    {
      "name": "ImgCropperConfig",
      "children": "interface ImgCropperConfig {\n  /** Set anti-aliased( default: true) */\n  antiAliased: boolean,\n  autoCrop: boolean,\n  /** Background color( default: null), if is null in png is transparent but not in jpg */\n  fill: string | null,\n  /** Cropper area height */\n  height: number,\n  output: ImgOutput | ImgResolution,\n  /** If this is not defined, the new image will be automatically defined */\n  type: string,\n  /** Cropper area width */\n  width: number\n}"
    },
    {
      "name": "ImgCropperEvent",
      "children": "interface ImgCropperEvent {\n  /** Cropped image in base64, !deprecated use instead `dataURL` */\n  base64: string,\n  /** Cropped image data URL */\n  dataURL: string,\n  height: number,\n  name: string,\n  /** Original Image data URL */\n  originalDataURL: string,\n  position: any,\n  /** Current rotation in degrees */\n  rotation: number,\n  scale: number,\n  /** Filetype */\n  type: string,\n  width: number\n}"
    },
    {
      "name": "ImgOutput",
      "children": "interface ImgOutput {\n  height: number,\n  width: number\n}"
    }
  ],
  "typeAliasList": [
    {
      "name": "LyResizingCroppingImagesConfig",
      "children": "/** Deprecated, use instead ImgCropperConfig */\ntype LyResizingCroppingImagesConfig = ImgCropperConfig"
    }
  ],
  "variableList": [
    {
      "name": "CONFIG_DEFAULT",
      "children": "const CONFIG_DEFAULT = <ImgCropperConfig>{\n  width: 250,\n  height: 200,\n  output: ImgResolution.Default,\n  antiAliased: true\n}"
    },
    {
      "name": "STYLE_PRIORITY",
      "children": "const STYLE_PRIORITY = -2"
    }
  ],
  "ngModuleList": [
    {
      "name": "LyResizingCroppingImageModule",
      "children": "import { LyResizingCroppingImageModule } from '@alyle/ui/resizing-cropping-images'"
    }
  ]
}