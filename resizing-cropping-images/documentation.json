{"pipes":[],"interfaces":[{"name":"ImgCropperConfig","id":"interface-ImgCropperConfig-cae532cd227e8f9e7f7f2692790a6186","file":"src/lib/resizing-cropping-images/resizing-cropping-images.ts","type":"interface","properties":[{"name":"antiAliased","type":"boolean","optional":true,"description":"<p>Set anti-aliased( default: true) </p>\n","line":89},{"name":"autoCrop","type":"boolean","optional":true,"description":"","line":90},{"name":"fill","type":"string | null","optional":true,"description":"<p>Background color( default: null), if is null in png is transparent but not in jpg </p>\n","line":87},{"name":"height","type":"number","optional":false,"description":"<p>Cropper area height</p>\n","line":83},{"name":"output","type":"literal type | ImgResolution","optional":true,"description":"","line":91},{"name":"type","type":"string","optional":true,"description":"<p>If this is not defined, the new image will be automatically defined </p>\n","line":85},{"name":"width","type":"number","optional":false,"description":"<p>Cropper area width</p>\n","line":81}],"indexSignatures":[],"kind":150,"description":"<p>Image Cropper Config </p>\n","methods":[]},{"name":"ImgCropperEvent","id":"interface-ImgCropperEvent-cae532cd227e8f9e7f7f2692790a6186","file":"src/lib/resizing-cropping-images/resizing-cropping-images.ts","type":"interface","properties":[{"name":"base64","type":"string","optional":false,"description":"<p>Cropped image in base64, !deprecated use instead <code>dataURL</code> </p>\n","line":110},{"name":"dataURL","type":"string","optional":false,"description":"<p>Cropped image data URL </p>\n","line":112},{"name":"height","type":"number","optional":false,"description":"","line":117},{"name":"name","type":"string","optional":false,"description":"","line":113},{"name":"originalDataURL","type":"string","optional":false,"description":"<p>Original Image data URL </p>\n","line":119},{"name":"position","type":"literal type","optional":false,"description":"","line":123},{"name":"rotation","type":"number","optional":false,"description":"<p>Current rotation in degrees </p>\n","line":122},{"name":"scale","type":"number","optional":false,"description":"","line":120},{"name":"type","type":"string","optional":false,"description":"<p>Filetype </p>\n","line":115},{"name":"width","type":"number","optional":false,"description":"","line":116}],"indexSignatures":[],"kind":150,"methods":[]},{"name":"ImgRect","id":"interface-ImgRect-cae532cd227e8f9e7f7f2692790a6186","file":"src/lib/resizing-cropping-images/resizing-cropping-images.ts","type":"interface","properties":[{"name":"ht","type":"number","optional":false,"description":"","line":145},{"name":"wt","type":"number","optional":false,"description":"<p>transform with </p>\n","line":144},{"name":"x","type":"number","optional":false,"description":"","line":137},{"name":"xc","type":"number","optional":false,"description":"","line":139},{"name":"y","type":"number","optional":false,"description":"","line":138},{"name":"yc","type":"number","optional":false,"description":"","line":140}],"indexSignatures":[],"kind":150,"methods":[]}],"injectables":[],"classes":[],"modules":[{"name":"LyResizingCroppingImageModule","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"LyResizingCroppingImages"}]},{"type":"imports","elements":[]},{"type":"exports","elements":[{"name":"LyResizingCroppingImages"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]}],"miscellaneous":{"functions":[],"typealiases":[{"name":"LyResizingCroppingImagesConfig","ctype":"miscellaneous","subtype":"typealias","rawtype":"ImgCropperConfig","file":"src/lib/resizing-cropping-images/resizing-cropping-images.ts","description":"","kind":161}],"enumerationsCode":"/** Image output */\nenum ImgResolution {\n  Default,\n  OriginalImage\n}","variablesCode":"const CONFIG_DEFAULT = <ImgCropperConfig>{\n  width: 250,\n  height: 200,\n  output: ImgResolution.Default,\n  antiAliased: true\n};\n\nconst STYLE_PRIORITY = -2;"},"routes":[],"coverage":{},"c_d":[{"title":"components","data":[{"name":"LyResizingCroppingImages","id":"component-LyResizingCroppingImages-cae532cd227e8f9e7f7f2692790a6186","file":"src/lib/resizing-cropping-images/resizing-cropping-images.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ly-img-cropper, ly-cropping","styleUrls":[],"styles":[],"templateUrl":["resizing-cropping-images.html"],"viewProviders":[],"hostBindings":[],"hostListeners":[{"name":"window:resize","args":[],"argsDecorator":[],"line":272}],"description":"","type":"component","preserveWhitespaces":false,"accessors":{"config":{"name":"config","setSignature":{"name":"config","type":"void","args":[{"name":"val","type":""}],"returnType":"void","line":187,"jsdoctags":[{"name":"val","type":"","tagName":{"text":"param"}}]}},"scale":{"name":"scale","setSignature":{"name":"scale","type":"void","args":[{"name":"val","type":"number"}],"returnType":"void","line":195,"jsdoctags":[{"name":"val","type":"number","tagName":{"text":"param"}}]}},"minScale":{"name":"minScale","getSignature":{"name":"minScale","type":"number","returnType":"number","line":200,"description":"<p>Get min scale </p>\n"}}},"templateData":"<div #_imgContainer\n[className]=\"classes.imgContainer\"\n(slidestart)=\"_moveStart()\"\n(slide)=\"_move($event)\"\n(slideend)=\"_slideEnd()\">\n  <canvas #_imgCanvas></canvas>\n</div>\n<div #_croppingContainer *ngIf=\"_isLoadedImg; else content\" [className]=\"classes.croppingContainer\" [ngStyle]=\"{\n  width: config.width + 'px',\n  height: config.height + 'px'\n}\"></div>\n<ng-template #content>\n  <div [className]=\"classes.croppContent\">\n    <input #_fileInput type=\"file\" (change)=\"selectInputEvent($event)\" accept=\"image/*\">\n    <ng-content></ng-content>\n  </div>\n</ng-template>\n","code":"isCropped: boolean\n\n/** When is loaded image & ready for crop */\nisLoaded: boolean\n\n@Input() config: ImgCropperConfig\n\n/** Set scale */\n@Input() scale: number\n\n/** Get min scale */\nget minScale(): number\n\n/** On crop new image */\n@Output() cropped = new EventEmitter<ImgCropperEvent>()\n\n/** Emit an error when the loaded image is not valid */\n@Output() error = new EventEmitter<ImgCropperEvent>()\n\n/** On loaded new image */\n@Output() loaded = new EventEmitter<ImgCropperEvent>()\n\n@Output() scaleChange = new EventEmitter<number>()\n\ncenter(): void\n\n/** Clean the img cropper */\nclean(): void\n\n/**\n * Crop Image\n * Resizing & cropping image\n */\ncrop(config?: ImgCropperConfig): ImgCropperEvent\n\nfit(): void\n\n/** Ajustar a la pantalla */\nfitToScreen(): void\n\nrotate(degrees: number): void\n\nselectInputEvent(img: Event): void\n\n/** Set Img */\nsetImageUrl(src: string): void\n\n/** Set the size of the image, the values can be 0 between 1, where 1 is the original size */\nsetScale(size: number, noAutoCrop?: boolean): void\n\nupdatePosition(x?: number, y?: number): void\n\n/** + */\nzoomIn(): void\n\n/** - */\nzoomOut(): void"}]}],"interfacesCode":"/** Image Cropper Config */\ninterface ImgCropperConfig {\n  /** Set anti-aliased( default: true) */\n  antiAliased?: boolean\n  autoCrop?: boolean\n  /** Background color( default: null), if is null in png is transparent but not in jpg */\n  fill?: string | null\n  /** Cropper area height */\n  height: number\n  output?: literal type | ImgResolution\n  /** If this is not defined, the new image will be automatically defined */\n  type?: string\n  /** Cropper area width */\n  width: number\n}\n\ninterface ImgCropperEvent {\n  /** Cropped image in base64, !deprecated use instead `dataURL` */\n  base64: string\n  /** Cropped image data URL */\n  dataURL: string\n  height: number\n  name: string\n  /** Original Image data URL */\n  originalDataURL: string\n  position: literal type\n  /** Current rotation in degrees */\n  rotation: number\n  scale: number\n  /** Filetype */\n  type: string\n  width: number\n}\n\ninterface ImgRect {\n  ht: number\n  /** transform with */\n  wt: number\n  x: number\n  xc: number\n  y: number\n  yc: number\n}"}